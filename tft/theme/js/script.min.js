(() => {
  // javascript/Tabs.js
  var Default = {
    defaultTabId: null,
    onShow: () => {
    }
  };
  var Tabs = class {
    _accordionEl;
    _items;
    _activeTab;
    _options;
    _initialized;
    constructor(accordionEl = null, items = [], options = Default) {
      this._accordionEl = accordionEl;
      this._items = items;
      this._activeTab = options ? this.getTab(options.defaultTabId) : null;
      this._options = { ...Default, ...options };
      this._initialized = false;
      this.init();
    }
    init() {
      if (this._items.length && !this._initialized) {
        !this._activeTab ? this.setActiveTab(this._items[0]) : null;
        this.show(this._activeTab.id, true);
        this._items.map((tab) => {
          tab.triggerEl.addEventListener("click", () => {
            this.show(tab.id);
          });
        });
        const nextButton = this._accordionEl.querySelector("[data-tabs-next]");
        const prevButton = this._accordionEl.querySelector("[data-tabs-prev]");
        nextButton.addEventListener("click", () => {
          const visibleItems = this.getVisibleItems();
          const currentIndex = visibleItems.findIndex((item) => item.id === this._activeTab.id);
          const nextIndex = currentIndex === visibleItems.length - 1 ? 0 : currentIndex + 1;
          this.show(visibleItems[nextIndex].id);
        });
        prevButton.addEventListener("click", () => {
          const visibleItems = this.getVisibleItems();
          const currentIndex = visibleItems.findIndex((item) => item.id === this._activeTab.id);
          const prevIndex = currentIndex === 0 ? visibleItems.length - 1 : currentIndex - 1;
          this.show(visibleItems[prevIndex].id);
        });
      }
    }
    destroy() {
      this._initialized ? this._initialized = false : null;
    }
    removeInstance() {
      this.destroy();
    }
    destroyAndRemoveInstance() {
      this.destroy();
      this.removeInstance();
    }
    getActiveTab() {
      return this._activeTab;
    }
    setActiveTab(tab) {
      this._activeTab = tab;
    }
    getTab(id) {
      return this._items.filter((t) => t.id === id)[0];
    }
    getVisibleItems() {
      const visibleItems = [];
      this._items.forEach((item) => {
        if (!item.triggerEl.getAttribute("style")) {
          visibleItems.push(item);
        }
      });
      return visibleItems;
    }
    show(id, forceShow = false) {
      const tab = this.getTab(id);
      if (tab === this._activeTab && !forceShow) {
        return;
      }
      this._items.map((t) => {
        if (t !== tab) {
          t.targetEl.classList.add("hidden");
          t.triggerEl.setAttribute("aria-selected", "false");
        }
      });
      tab.triggerEl.setAttribute("aria-selected", "true");
      tab.targetEl.classList.remove("hidden");
      this.setActiveTab(tab);
      this._options.onShow(this, tab);
    }
  };
  var initTabs = () => {
    document.querySelectorAll("[data-tabs-toggle]").forEach(($parentEl) => {
      const tabItems = [];
      let defaultTabId = null;
      $parentEl.querySelectorAll('[role="tab"]').forEach(($triggerEl) => {
        const isActive = $triggerEl.getAttribute("aria-selected") === "true";
        const tab = {
          id: $triggerEl.getAttribute("data-tabs-target"),
          triggerEl: $triggerEl,
          targetEl: document.querySelector(
            $triggerEl.getAttribute("data-tabs-target")
          )
        };
        tabItems.push(tab);
        if (isActive) {
          defaultTabId = tab.id;
        }
      });
      new Tabs(
        $parentEl,
        tabItems,
        {
          defaultTabId
        }
      );
    });
  };

  // javascript/Accordion.js
  var Default2 = {
    alwaysOpen: false,
    activeClasses: "active",
    inactiveClasses: "inactive",
    onOpen: () => {
    },
    onClose: () => {
    },
    onToggle: () => {
    }
  };
  var Accordion = class {
    _instanceId;
    _accordionEl;
    _items;
    _options;
    _clickHandler;
    _initialized;
    constructor(accordionEl = null, items = [], options = Default2) {
      this._accordionEl = accordionEl;
      this._items = items;
      this._options = { ...Default2, ...options };
      this._initialized = false;
      this.init();
    }
    init() {
      if (this._items.length && !this._initialized) {
        this._items.forEach((item) => {
          if (item.active) {
            this.open(item.id);
          }
          const clickHandler = () => {
            this.toggle(item.id);
          };
          item.triggerEl.addEventListener("click", clickHandler);
          item.clickHandler = clickHandler;
        });
        this._initialized = true;
      }
    }
    destroy() {
      if (this._items.length && this._initialized) {
        this._items.forEach((item) => {
          item.triggerEl.removeEventListener("click", item.clickHandler);
          delete item.clickHandler;
        });
        this._initialized = false;
      }
    }
    removeInstance() {
    }
    destroyAndRemoveInstance() {
      this.destroy();
      this.removeInstance();
    }
    getItem(id) {
      return this._items.filter((item) => item.id === id)[0];
    }
    open(id) {
      const item = this.getItem(id);
      if (!this._options.alwaysOpen) {
        this._items.map((i) => {
          if (i !== item) {
            i.triggerEl.classList.remove(
              ...this._options.activeClasses.split(" ")
            );
            i.triggerEl.classList.add(
              ...this._options.inactiveClasses.split(" ")
            );
            i.targetEl.classList.add("hidden");
            i.triggerEl.setAttribute("aria-expanded", "false");
            i.active = false;
            if (i.iconEl) {
              i.iconEl.classList.remove("rotate-180");
            }
          }
        });
      }
      item.triggerEl.classList.add(...this._options.activeClasses.split(" "));
      item.triggerEl.classList.remove(
        ...this._options.inactiveClasses.split(" ")
      );
      item.triggerEl.setAttribute("aria-expanded", "true");
      item.targetEl.classList.remove("hidden");
      item.active = true;
      if (item.iconEl) {
        item.iconEl.classList.add("rotate-180");
      }
      console.log(this._options);
      this._options.onOpen(this, item);
    }
    toggle(id) {
      const item = this.getItem(id);
      item.active ? this.close(id) : this.open(id);
      this._options.onToggle(this, item);
    }
    close(id) {
      const item = this.getItem(id);
      item.triggerEl.classList.remove(
        ...this._options.activeClasses.split(" ")
      );
      item.triggerEl.classList.add(
        ...this._options.inactiveClasses.split(" ")
      );
      item.targetEl.classList.add("hidden");
      item.triggerEl.setAttribute("aria-expanded", "false");
      item.active = false;
      item.iconEl ? item.iconEl.classList.remove("rotate-180") : null;
      this._options.onClose(this, item);
    }
  };
  var initAccordions = () => {
    document.querySelectorAll("[data-accordion]").forEach(($accordionEl) => {
      const alwaysOpen = $accordionEl.getAttribute("data-accordion");
      const activeClasses = $accordionEl.getAttribute("data-active-classes");
      const inactiveClasses = $accordionEl.getAttribute(
        "data-inactive-classes"
      );
      const items = [];
      $accordionEl.querySelectorAll("[data-accordion-target]").forEach(($triggerEl) => {
        if ($triggerEl.closest("[data-accordion]") === $accordionEl) {
          const item = {
            id: $triggerEl.getAttribute("data-accordion-target"),
            triggerEl: $triggerEl,
            targetEl: document.querySelector(
              $triggerEl.getAttribute("data-accordion-target")
            ),
            iconEl: $triggerEl.querySelector(
              "[data-accordion-icon]"
            ),
            active: $triggerEl.getAttribute("aria-expanded") === "true" ? true : false
          };
          items.push(item);
        }
      });
      new Accordion(
        $accordionEl,
        items,
        {
          alwaysOpen: alwaysOpen === "open" ? true : false,
          activeClasses: activeClasses ? activeClasses : Default2.activeClasses,
          inactiveClasses: inactiveClasses ? inactiveClasses : Default2.inactiveClasses
        }
      );
    });
  };

  // javascript/SymbolsSearch.js
  var SymbolsSearch = class {
    _form;
    _input;
    _cards;
    _tabPanels;
    _tabs;
    _nextArrow;
    _prevArrow;
    _initialized;
    _activeTabs;
    constructor(formEl, selector) {
      this._form = formEl;
      this._input = formEl.querySelector("input");
      this._cards = document.querySelectorAll("#" + selector + " [data-accordion]");
      this._tabs = document.querySelectorAll('[data-tabs-toggle="#' + selector + '"] [role="tab"]');
      this._tabPanels = document.querySelectorAll("#" + selector + ' [role="tabpanel"]');
      this._nextArrow = document.querySelector('[data-tabs-toggle="#' + selector + '"] [data-tabs-next]');
      this._prevArrow = document.querySelector('[data-tabs-toggle="#' + selector + '"] [data-tabs-prev]');
      this._activeTabs = [];
      this._initialized = false;
      this.init();
    }
    init() {
      if (this._cards.length && !this._initialized) {
        const searchHandler = (ev) => {
          this.search(ev.target.value);
        };
        const submitHandler = (ev) => {
          this.submitForm(ev);
        };
        this._form.addEventListener("submit", submitHandler);
        this._input.addEventListener("keyup", searchHandler);
        this._initialized = true;
      }
    }
    search(value) {
      const string = value.toLowerCase();
      this._cards.forEach((card) => {
        const id = card.id.toLowerCase();
        card.classList.toggle("hidden", !id.includes(string));
      });
      this.hideTabs();
      this.setVisibleTab();
      this.toggleArrows();
    }
    hideTabs() {
      for (let i = 0; i < this._tabPanels.length; i++) {
        const total = this._tabPanels[i].querySelectorAll("[data-accordion]").length;
        const hidden = this._tabPanels[i].querySelectorAll(".hidden[data-accordion]").length;
        const id = this._tabPanels[i].id;
        const tab = document.querySelector('[data-tabs-target="#' + id + '"]');
        if (total === hidden) {
          tab.style.display = "none";
        } else {
          tab.removeAttribute("style");
        }
      }
      const activeTabs = [];
      this._tabs.forEach((tab) => {
        if (!tab.getAttribute("style")) {
          activeTabs.push(tab);
        }
      });
      this._activeTabs = activeTabs;
    }
    setVisibleTab() {
      let isVisibleTab = false;
      this._activeTabs.forEach((tab) => {
        if (tab.getAttribute("aria-selected") === "true") {
          isVisibleTab = true;
        }
      });
      if (!isVisibleTab && this._activeTabs.length > 0) {
        this._activeTabs[0].click();
      }
    }
    toggleArrows() {
      if (this._activeTabs.length <= 1) {
        this._nextArrow.style.display = "none";
        this._prevArrow.style.display = "none";
      } else {
        this._nextArrow.removeAttribute("style");
        this._prevArrow.removeAttribute("style");
      }
    }
    submitForm(ev) {
      ev.preventDefault();
      ev.stopPropagation();
      this.search(this._input.value);
    }
  };
  var initSymbolsSearch = () => {
    const form = document.getElementById("symbols-spec-search");
    form ? new SymbolsSearch(form, "symbols-specs-tab-content") : null;
  };

  // javascript/SymbolsTable.js
  var SymbolsTable = class {
    _lastUpdateTimes = {};
    _iconDown = '<svg xmlns="http://www.w3.org/2000/svg" height="1em" viewBox="0 0 320 512"><path d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z"/></svg>';
    _iconUp = '<svg xmlns="http://www.w3.org/2000/svg" height="1em" viewBox="0 0 320 512"><path d="M182.6 137.4c-12.5-12.5-32.8-12.5-45.3 0l-128 128c-9.2 9.2-11.9 22.9-6.9 34.9s16.6 19.8 29.6 19.8H288c12.9 0 24.6-7.8 29.6-19.8s2.2-25.7-6.9-34.9l-128-128z"/></svg>';
    constructor() {
      this.init();
    }
    init() {
      this.initializeWebSocket();
    }
    updateUI(symbol, bid, ask, spread, total) {
      const updateElement = (id, newValue) => {
        const currentTime = (/* @__PURE__ */ new Date()).getTime();
        const lastUpdateTime = this._lastUpdateTimes[`${symbol}_${id}`] || 0;
        if (currentTime - lastUpdateTime < 1e3) {
          return;
        }
        const element = document.getElementById(`${symbol}_${id}`);
        if (!element) {
          return;
        }
        const elementText = parseFloat(element.innerText);
        const lastValue = isNaN(elementText) ? 0 : elementText;
        let colorClass, caretHtml = "";
        if (newValue > lastValue) {
          colorClass = "color_green";
          caretHtml = this._iconUp;
        } else if (newValue < lastValue) {
          colorClass = "color_red";
          caretHtml = this._iconDown;
        }
        element.innerText = newValue;
        element.className = colorClass;
        element.nextElementSibling.innerHTML = caretHtml;
        this._lastUpdateTimes[`${symbol}_${id}`] = currentTime;
      };
      updateElement("BID", bid);
      updateElement("ASK", ask);
      updateElement("SPREAD", spread);
      updateElement("PRICE", total);
    }
    initializeWebSocket() {
      const ws = new WebSocket(`ws://localhost:3000/ws`);
      ws.onmessage = (event) => {
        let [symbol, bid, ask] = event.data.split(",");
        symbol = symbol.replace("_ecn", "");
        const cur_bid = parseFloat(bid).toFixed(5);
        const cur_ask = parseFloat(ask).toFixed(5);
        const cur_spread = (parseFloat(ask) - parseFloat(bid)).toFixed(5);
        const cur_total = (parseFloat(cur_spread) + 5).toFixed(5);
        this.updateUI(symbol, cur_bid, cur_ask, cur_spread, cur_total);
      };
      ws.onclose = () => {
        setTimeout(this.initializeWebSocket, 5e3);
      };
      ws.onerror = function(err) {
        console.error("WebSocket Error: ", err);
        ws.close();
      };
    }
  };
  var initSymbolsTable = () => {
    const table = document.querySelector(".trade-section-upper");
    table ? new SymbolsTable() : null;
  };

  // javascript/script.js
  document.addEventListener("DOMContentLoaded", function() {
    initTabs();
    initAccordions();
    initSymbolsSearch();
    initSymbolsTable();
  });
})();
